
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 01 19:55:44 GMT-04:00 2021
//----------------------------------------------------

package clases;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 01 19:55:44 GMT-04:00 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\010\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\007\004\000\002\007\003\000\002\007\004\000\002" +
    "\007\003\000\002\005\005\000\002\005\007\000\002\005" +
    "\007\000\002\005\005\000\002\005\007\000\002\005\007" +
    "\000\002\005\005\000\002\005\007\000\002\005\007\000" +
    "\002\005\005\000\002\005\007\000\002\005\005\000\002" +
    "\005\007\000\002\005\005\000\002\005\007\000\002\005" +
    "\005\000\002\005\007\000\002\005\005\000\002\005\007" +
    "\000\002\005\007\000\002\010\002\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\006\013\000\002\006\012\000\002\006\013" +
    "\000\002\006\013\000\002\006\012\000\002\006\013\000" +
    "\002\006\013\000\002\006\012\000\002\006\013\000\002" +
    "\011\011\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\012\015" +
    "\000\002\014\011\000\002\015\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\010\012\006\013\004\014\005\001\002\000" +
    "\004\014\u0107\001\002\000\004\046\u0103\001\002\000\004" +
    "\014\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\046\012\001\002\000\004\041\013" +
    "\001\002\000\026\006\021\007\017\010\025\012\020\013" +
    "\026\021\014\022\022\023\015\024\027\025\023\001\002" +
    "\000\004\046\376\001\002\000\004\046\371\001\002\000" +
    "\030\006\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\042\uffdd\001\002\000" +
    "\004\046\362\001\002\000\010\006\333\010\332\025\334" +
    "\001\002\000\004\046\323\001\002\000\004\046\316\001" +
    "\002\000\004\046\307\001\002\000\030\006\uffdb\007\uffdb" +
    "\010\uffdb\012\uffdb\013\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\042\uffdb\001\002\000\004\046\300\001\002" +
    "\000\010\006\042\010\041\025\043\001\002\000\004\046" +
    "\034\001\002\000\030\006\021\007\017\010\025\012\020" +
    "\013\026\021\014\022\022\023\015\024\027\025\023\042" +
    "\032\001\002\000\030\006\uffde\007\uffde\010\uffde\012\uffde" +
    "\013\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\042" +
    "\uffde\001\002\000\004\002\000\001\002\000\030\006\uffdc" +
    "\007\uffdc\010\uffdc\012\uffdc\013\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\042\uffdc\001\002\000\006\032\036" +
    "\045\035\001\002\000\042\004\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\027\uffcb\031\uffcb\042\uffcb\046\uffcb\001" +
    "\002\000\004\047\037\001\002\000\004\045\040\001\002" +
    "\000\042\004\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\027\uffca\031\uffca\042\uffca\046\uffca\001\002\000\004\046" +
    "\271\001\002\000\004\046\262\001\002\000\004\046\044" +
    "\001\002\000\004\037\045\001\002\000\024\006\051\007" +
    "\050\010\054\021\046\022\052\023\047\024\055\025\053" +
    "\040\uffc6\001\002\000\004\046\261\001\002\000\004\046" +
    "\260\001\002\000\004\046\257\001\002\000\004\046\256" +
    "\001\002\000\004\046\255\001\002\000\004\046\254\001" +
    "\002\000\004\046\253\001\002\000\004\046\252\001\002" +
    "\000\004\040\057\001\002\000\004\041\060\001\002\000" +
    "\034\004\073\006\065\007\017\010\077\011\075\021\014" +
    "\022\022\023\015\024\027\025\074\027\072\031\076\046" +
    "\064\001\002\000\036\004\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\027" +
    "\ufff6\031\ufff6\042\ufff6\046\ufff6\001\002\000\036\004\073" +
    "\006\065\007\017\010\077\011\075\021\014\022\022\023" +
    "\015\024\027\025\074\027\072\031\076\042\251\046\064" +
    "\001\002\000\036\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc" +
    "\031\ufffc\042\ufffc\046\ufffc\001\002\000\004\032\200\001" +
    "\002\000\004\046\171\001\002\000\036\004\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\027\ufffa\031\ufffa\042\ufffa\046\ufffa\001\002" +
    "\000\036\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\031\ufff8" +
    "\042\ufff8\046\ufff8\001\002\000\036\004\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\027\ufff2\031\ufff2\042\ufff2\046\ufff2\001\002\000" +
    "\036\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\031\ufff4\042" +
    "\ufff4\046\ufff4\001\002\000\004\037\157\001\002\000\010" +
    "\026\152\046\153\047\151\001\002\000\004\046\142\001" +
    "\002\000\004\041\132\001\002\000\004\037\107\001\002" +
    "\000\004\046\100\001\002\000\006\032\102\045\101\001" +
    "\002\000\042\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\027\uffd4\031\uffd4\042\uffd4\046\uffd4\001\002\000\006" +
    "\026\103\046\104\001\002\000\004\045\106\001\002\000" +
    "\004\045\105\001\002\000\042\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\027\uffd2\031\uffd2\042\uffd2\046\uffd2" +
    "\001\002\000\042\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\027\uffd3\031\uffd3\042\uffd3\046\uffd3\001\002\000" +
    "\006\016\111\046\112\001\002\000\004\040\120\001\002" +
    "\000\004\040\uffb3\001\002\000\004\017\113\001\002\000" +
    "\012\016\116\026\115\046\117\047\114\001\002\000\004" +
    "\040\uffb1\001\002\000\004\040\uffaf\001\002\000\004\040" +
    "\uffb2\001\002\000\004\040\uffb0\001\002\000\004\041\121" +
    "\001\002\000\034\004\073\006\065\007\017\010\077\011" +
    "\075\021\014\022\022\023\015\024\027\025\074\027\072" +
    "\031\076\046\064\001\002\000\036\004\073\006\065\007" +
    "\017\010\077\011\075\021\014\022\022\023\015\024\027" +
    "\025\074\027\072\031\076\042\126\046\064\001\002\000" +
    "\036\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\031\ufff7\042" +
    "\ufff7\046\ufff7\001\002\000\036\004\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\027\ufffd\031\ufffd\042\ufffd\046\ufffd\001\002\000\036" +
    "\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\031\ufffb\042\ufffb" +
    "\046\ufffb\001\002\000\036\004\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\027\uffad\031\uffad\042\uffad\046\uffad\001\002\000\036\004" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\027\ufff9\031\ufff9\042\ufff9\046" +
    "\ufff9\001\002\000\036\004\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027" +
    "\ufff3\031\ufff3\042\ufff3\046\ufff3\001\002\000\036\004\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\027\ufff5\031\ufff5\042\ufff5\046\ufff5" +
    "\001\002\000\034\004\073\006\065\007\017\010\077\011" +
    "\075\021\014\022\022\023\015\024\027\025\074\027\072" +
    "\031\076\046\064\001\002\000\036\004\073\006\065\007" +
    "\017\010\077\011\075\021\014\022\022\023\015\024\027" +
    "\025\074\027\072\031\076\042\134\046\064\001\002\000" +
    "\004\031\135\001\002\000\004\037\136\001\002\000\006" +
    "\016\111\046\112\001\002\000\004\040\140\001\002\000" +
    "\004\045\141\001\002\000\036\004\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025" +
    "\uffac\027\uffac\031\uffac\042\uffac\046\uffac\001\002\000\006" +
    "\032\144\045\143\001\002\000\042\004\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\027\uffc9\031\uffc9\042\uffc9\046" +
    "\uffc9\001\002\000\006\016\145\046\146\001\002\000\004" +
    "\045\150\001\002\000\004\045\147\001\002\000\042\004" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7\031" +
    "\uffc7\042\uffc7\046\uffc7\001\002\000\042\004\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\031\uffc8\042\uffc8" +
    "\046\uffc8\001\002\000\004\045\156\001\002\000\004\045" +
    "\155\001\002\000\004\045\154\001\002\000\036\004\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\027\uffe1\031\uffe1\042\uffe1\046\uffe1" +
    "\001\002\000\036\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf" +
    "\031\uffdf\042\uffdf\046\uffdf\001\002\000\036\004\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\031\uffe0\042\uffe0\046\uffe0\001" +
    "\002\000\006\016\111\046\112\001\002\000\004\040\161" +
    "\001\002\000\004\041\162\001\002\000\034\004\073\006" +
    "\065\007\017\010\077\011\075\021\014\022\022\023\015" +
    "\024\027\025\074\027\072\031\076\046\064\001\002\000" +
    "\036\004\073\006\065\007\017\010\077\011\075\021\014" +
    "\022\022\023\015\024\027\025\074\027\072\031\076\042" +
    "\164\046\064\001\002\000\040\004\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\027\uffb4\030\165\031\uffb4\042\uffb4\046\uffb4\001\002" +
    "\000\004\041\166\001\002\000\034\004\073\006\065\007" +
    "\017\010\077\011\075\021\014\022\022\023\015\024\027" +
    "\025\074\027\072\031\076\046\064\001\002\000\036\004" +
    "\073\006\065\007\017\010\077\011\075\021\014\022\022" +
    "\023\015\024\027\025\074\027\072\031\076\042\170\046" +
    "\064\001\002\000\036\004\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027" +
    "\uffae\031\uffae\042\uffae\046\uffae\001\002\000\006\032\173" +
    "\045\172\001\002\000\042\004\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\027\uffda\031\uffda\042\uffda\046\uffda\001" +
    "\002\000\006\046\175\047\174\001\002\000\004\045\177" +
    "\001\002\000\004\045\176\001\002\000\042\004\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8\031\uffd8\042" +
    "\uffd8\046\uffd8\001\002\000\042\004\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\027\uffd9\031\uffd9\042\uffd9\046\uffd9" +
    "\001\002\000\012\016\203\026\202\046\204\047\201\001" +
    "\002\000\014\033\237\034\236\035\240\036\235\045\234" +
    "\001\002\000\004\045\233\001\002\000\004\045\232\001" +
    "\002\000\014\033\210\034\207\035\211\036\205\045\206" +
    "\001\002\000\006\046\227\047\226\001\002\000\036\004" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\027\ufff1\031\ufff1\042\ufff1\046" +
    "\ufff1\001\002\000\006\046\223\047\222\001\002\000\006" +
    "\046\217\047\216\001\002\000\006\046\213\047\212\001" +
    "\002\000\004\045\215\001\002\000\004\045\214\001\002" +
    "\000\036\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\031\uffeb" +
    "\042\uffeb\046\uffeb\001\002\000\036\004\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\031\uffe5\042\uffe5\046\uffe5\001\002\000" +
    "\004\045\221\001\002\000\004\045\220\001\002\000\036" +
    "\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\027\uffed\031\uffed\042\uffed" +
    "\046\uffed\001\002\000\036\004\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\027\uffe9\031\uffe9\042\uffe9\046\uffe9\001\002\000\004\045" +
    "\225\001\002\000\004\045\224\001\002\000\036\004\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\027\uffec\031\uffec\042\uffec\046\uffec" +
    "\001\002\000\036\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\031\uffe7\042\uffe7\046\uffe7\001\002\000\004\045\231\001" +
    "\002\000\004\045\230\001\002\000\036\004\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\027\uffea\031\uffea\042\uffea\046\uffea\001\002" +
    "\000\036\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\031\uffe3" +
    "\042\uffe3\046\uffe3\001\002\000\036\004\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\027\uffef\031\uffef\042\uffef\046\uffef\001\002\000" +
    "\036\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\027\uffee\031\uffee\042" +
    "\uffee\046\uffee\001\002\000\036\004\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\027\ufff0\031\ufff0\042\ufff0\046\ufff0\001\002\000\004" +
    "\046\247\001\002\000\004\046\245\001\002\000\004\046" +
    "\243\001\002\000\004\046\241\001\002\000\004\045\242" +
    "\001\002\000\036\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\031\uffe4\042\uffe4\046\uffe4\001\002\000\004\045\244\001" +
    "\002\000\036\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\031" +
    "\uffe8\042\uffe8\046\uffe8\001\002\000\004\045\246\001\002" +
    "\000\036\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\031\uffe6" +
    "\042\uffe6\046\uffe6\001\002\000\004\045\250\001\002\000" +
    "\036\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\031\uffe2\042" +
    "\uffe2\046\uffe2\001\002\000\030\006\uffb5\007\uffb5\010\uffb5" +
    "\012\uffb5\013\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\042\uffb5\001\002\000\004\040\uffbf\001\002\000\004" +
    "\040\uffc3\001\002\000\004\040\uffbe\001\002\000\004\040" +
    "\uffc1\001\002\000\004\040\uffc5\001\002\000\004\040\uffc4" +
    "\001\002\000\004\040\uffc0\001\002\000\004\040\uffc2\001" +
    "\002\000\004\037\263\001\002\000\024\006\051\007\050" +
    "\010\054\021\046\022\052\023\047\024\055\025\053\040" +
    "\uffc6\001\002\000\004\040\265\001\002\000\004\041\266" +
    "\001\002\000\034\004\073\006\065\007\017\010\077\011" +
    "\075\021\014\022\022\023\015\024\027\025\074\027\072" +
    "\031\076\046\064\001\002\000\036\004\073\006\065\007" +
    "\017\010\077\011\075\021\014\022\022\023\015\024\027" +
    "\025\074\027\072\031\076\042\270\046\064\001\002\000" +
    "\030\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\042\uffbb\001\002\000" +
    "\004\037\272\001\002\000\024\006\051\007\050\010\054" +
    "\021\046\022\052\023\047\024\055\025\053\040\uffc6\001" +
    "\002\000\004\040\274\001\002\000\004\041\275\001\002" +
    "\000\034\004\073\006\065\007\017\010\077\011\075\021" +
    "\014\022\022\023\015\024\027\025\074\027\072\031\076" +
    "\046\064\001\002\000\036\004\073\006\065\007\017\010" +
    "\077\011\075\021\014\022\022\023\015\024\027\025\074" +
    "\027\072\031\076\042\277\046\064\001\002\000\030\006" +
    "\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\042\uffb8\001\002\000\010\032" +
    "\102\037\301\045\101\001\002\000\024\006\051\007\050" +
    "\010\054\021\046\022\052\023\047\024\055\025\053\040" +
    "\uffc6\001\002\000\004\040\303\001\002\000\004\041\304" +
    "\001\002\000\034\004\073\006\065\007\017\010\077\011" +
    "\075\021\014\022\022\023\015\024\027\025\074\027\072" +
    "\031\076\046\064\001\002\000\036\004\073\006\065\007" +
    "\017\010\077\011\075\021\014\022\022\023\015\024\027" +
    "\025\074\027\072\031\076\042\306\046\064\001\002\000" +
    "\030\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\042\uffb9\001\002\000" +
    "\010\032\144\037\310\045\143\001\002\000\024\006\051" +
    "\007\050\010\054\021\046\022\052\023\047\024\055\025" +
    "\053\040\uffc6\001\002\000\004\040\312\001\002\000\004" +
    "\041\313\001\002\000\034\004\073\006\065\007\017\010" +
    "\077\011\075\021\014\022\022\023\015\024\027\025\074" +
    "\027\072\031\076\046\064\001\002\000\036\004\073\006" +
    "\065\007\017\010\077\011\075\021\014\022\022\023\015" +
    "\024\027\025\074\027\072\031\076\042\315\046\064\001" +
    "\002\000\030\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\042\uffb6\001" +
    "\002\000\006\032\320\045\317\001\002\000\042\004\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\031\uffcf" +
    "\042\uffcf\046\uffcf\001\002\000\004\047\321\001\002\000" +
    "\004\045\322\001\002\000\042\004\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\027\uffce\031\uffce\042\uffce\046\uffce" +
    "\001\002\000\010\032\173\037\324\045\172\001\002\000" +
    "\024\006\051\007\050\010\054\021\046\022\052\023\047" +
    "\024\055\025\053\040\uffc6\001\002\000\004\040\326\001" +
    "\002\000\004\041\327\001\002\000\034\004\073\006\065" +
    "\007\017\010\077\011\075\021\014\022\022\023\015\024" +
    "\027\025\074\027\072\031\076\046\064\001\002\000\036" +
    "\004\073\006\065\007\017\010\077\011\075\021\014\022" +
    "\022\023\015\024\027\025\074\027\072\031\076\042\331" +
    "\046\064\001\002\000\030\006\uffbc\007\uffbc\010\uffbc\012" +
    "\uffbc\013\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\042\uffbc\001\002\000\004\046\353\001\002\000\004\046" +
    "\344\001\002\000\004\046\335\001\002\000\004\037\336" +
    "\001\002\000\024\006\051\007\050\010\054\021\046\022" +
    "\052\023\047\024\055\025\053\040\uffc6\001\002\000\004" +
    "\040\340\001\002\000\004\041\341\001\002\000\034\004" +
    "\073\006\065\007\017\010\077\011\075\021\014\022\022" +
    "\023\015\024\027\025\074\027\072\031\076\046\064\001" +
    "\002\000\036\004\073\006\065\007\017\010\077\011\075" +
    "\021\014\022\022\023\015\024\027\025\074\027\072\031" +
    "\076\042\343\046\064\001\002\000\030\006\uffb7\007\uffb7" +
    "\010\uffb7\012\uffb7\013\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\042\uffb7\001\002\000\004\037\345\001\002" +
    "\000\024\006\051\007\050\010\054\021\046\022\052\023" +
    "\047\024\055\025\053\040\uffc6\001\002\000\004\040\347" +
    "\001\002\000\004\041\350\001\002\000\034\004\073\006" +
    "\065\007\017\010\077\011\075\021\014\022\022\023\015" +
    "\024\027\025\074\027\072\031\076\046\064\001\002\000" +
    "\036\004\073\006\065\007\017\010\077\011\075\021\014" +
    "\022\022\023\015\024\027\025\074\027\072\031\076\042" +
    "\352\046\064\001\002\000\030\006\uffbd\007\uffbd\010\uffbd" +
    "\012\uffbd\013\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\042\uffbd\001\002\000\004\037\354\001\002\000\024" +
    "\006\051\007\050\010\054\021\046\022\052\023\047\024" +
    "\055\025\053\040\uffc6\001\002\000\004\040\356\001\002" +
    "\000\004\041\357\001\002\000\034\004\073\006\065\007" +
    "\017\010\077\011\075\021\014\022\022\023\015\024\027" +
    "\025\074\027\072\031\076\046\064\001\002\000\036\004" +
    "\073\006\065\007\017\010\077\011\075\021\014\022\022" +
    "\023\015\024\027\025\074\027\072\031\076\042\361\046" +
    "\064\001\002\000\030\006\uffba\007\uffba\010\uffba\012\uffba" +
    "\013\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\042" +
    "\uffba\001\002\000\006\032\364\045\363\001\002\000\042" +
    "\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7" +
    "\031\uffd7\042\uffd7\046\uffd7\001\002\000\006\015\365\046" +
    "\366\001\002\000\004\045\370\001\002\000\004\045\367" +
    "\001\002\000\042\004\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\027\uffd5\031\uffd5\042\uffd5\046\uffd5\001\002\000" +
    "\042\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027" +
    "\uffd6\031\uffd6\042\uffd6\046\uffd6\001\002\000\006\032\373" +
    "\045\372\001\002\000\042\004\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\027\uffcd\031\uffcd\042\uffcd\046\uffcd\001" +
    "\002\000\004\047\374\001\002\000\004\045\375\001\002" +
    "\000\042\004\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\027\uffcc\031\uffcc\042\uffcc\046\uffcc\001\002\000\006\032" +
    "\u0100\045\377\001\002\000\042\004\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\027\uffd1\031\uffd1\042\uffd1\046\uffd1" +
    "\001\002\000\004\047\u0101\001\002\000\004\045\u0102\001" +
    "\002\000\042\004\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\027\uffd0\031\uffd0\042\uffd0\046\uffd0\001\002\000\004" +
    "\041\u0104\001\002\000\026\006\021\007\017\010\025\012" +
    "\020\013\026\021\014\022\022\023\015\024\027\025\023" +
    "\001\002\000\030\006\021\007\017\010\025\012\020\013" +
    "\026\021\014\022\022\023\015\024\027\025\023\042\u0106" +
    "\001\002\000\004\002\uffff\001\002\000\004\046\u0108\001" +
    "\002\000\004\041\u0109\001\002\000\026\006\021\007\017" +
    "\010\025\012\020\013\026\021\014\022\022\023\015\024" +
    "\027\025\023\001\002\000\030\006\021\007\017\010\025" +
    "\012\020\013\026\021\014\022\022\023\015\024\027\025" +
    "\023\042\u010b\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\015\006\023\007\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\030\006\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\061\004\067\005\062\011\065\012\066" +
    "\014\060\015\070\001\001\000\002\001\001\000\016\004" +
    "\127\005\123\011\124\012\126\014\122\015\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\121\004\067\005\062" +
    "\011\065\012\066\014\060\015\070\001\001\000\016\004" +
    "\127\005\123\011\124\012\126\014\122\015\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\132\004\067\005\062\011\065\012" +
    "\066\014\060\015\070\001\001\000\016\004\127\005\123" +
    "\011\124\012\126\014\122\015\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\162\004\067\005\062\011\065\012\066\014\060\015" +
    "\070\001\001\000\016\004\127\005\123\011\124\012\126" +
    "\014\122\015\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\166\004\067\005\062\011\065\012\066" +
    "\014\060\015\070\001\001\000\016\004\127\005\123\011" +
    "\124\012\126\014\122\015\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\266\004\067\005\062\011\065\012\066\014\060" +
    "\015\070\001\001\000\016\004\127\005\123\011\124\012" +
    "\126\014\122\015\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\275\004\067\005\062\011\065" +
    "\012\066\014\060\015\070\001\001\000\016\004\127\005" +
    "\123\011\124\012\126\014\122\015\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\304\004\067" +
    "\005\062\011\065\012\066\014\060\015\070\001\001\000" +
    "\016\004\127\005\123\011\124\012\126\014\122\015\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\313\004\067\005\062\011\065\012\066\014\060\015" +
    "\070\001\001\000\016\004\127\005\123\011\124\012\126" +
    "\014\122\015\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\327" +
    "\004\067\005\062\011\065\012\066\014\060\015\070\001" +
    "\001\000\016\004\127\005\123\011\124\012\126\014\122" +
    "\015\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\341\004\067\005\062\011\065\012\066\014\060" +
    "\015\070\001\001\000\016\004\127\005\123\011\124\012" +
    "\126\014\122\015\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\350\004\067\005\062\011\065" +
    "\012\066\014\060\015\070\001\001\000\016\004\127\005" +
    "\123\011\124\012\126\014\122\015\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\357\004\067" +
    "\005\062\011\065\012\066\014\060\015\070\001\001\000" +
    "\016\004\127\005\123\011\124\012\126\014\122\015\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\015\006\023\007\u0104\001\001\000\006\005" +
    "\030\006\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\015\006\023\007\u0109\001" +
    "\001\000\006\005\030\006\032\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_METODO ::= Private Bool Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_METODO ::= Bool Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_METODO ::= Public Bool Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_METODO ::= Private String Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_METODO ::= String Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_METODO ::= Public String Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_METODO ::= Private Int Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_METODO ::= Int Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_METODO ::= Public Int Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROS ::= Bool Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROS ::= Double Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROS ::= Float Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROS ::= Long Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROS ::= Short Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROS ::= String Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS ::= Char Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Bool Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Bool Identificador Igual Op_booleano PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Bool Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Double Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Double Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Float Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Float Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Long Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Long Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Short Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Short Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= String Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= String Identificador Igual Literal PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= String Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Char Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Char Identificador Igual Caracter PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Char Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Int Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Int Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Int Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= DECLARACION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= BLOQUE DECLARACION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUE ::= BLOQUE DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRECION ::= Return Literal PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRECION ::= Return Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRECION ::= Return Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRECION ::= Identificador Igual Numero Division Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRECION ::= Identificador Igual Identificador Division Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRECION ::= Identificador Igual Numero Multiplicacion Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRECION ::= Identificador Igual Identificador Multiplicacion Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRECION ::= Identificador Igual Numero Resta Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRECION ::= Identificador Igual Identificador Resta Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRECION ::= Identificador Igual Numero Suma Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRECION ::= Identificador Igual Identificador Suma Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRECION ::= Identificador Igual Identificador Division Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRECION ::= Identificador Igual Identificador Multiplicacion Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRECION ::= Identificador Igual Identificador Resta Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRECION ::= Identificador Igual Identificador Suma Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRECION ::= Identificador Igual Literal PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRECION ::= Identificador Igual Op_booleano PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRECION ::= Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRECION ::= Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= EXPRECION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA EXPRECION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Private Class Identificador Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Class Identificador Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Public Class Identificador Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

