
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 01 02:02:38 GMT-04:00 2021
//----------------------------------------------------

package clases;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 01 02:02:38 GMT-04:00 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\010\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\003\000\002\005\005\000\002\005\007\000\002" +
    "\005\007\000\002\005\005\000\002\005\007\000\002\005" +
    "\007\000\002\005\005\000\002\005\007\000\002\005\007" +
    "\000\002\005\005\000\002\005\007\000\002\005\005\000" +
    "\002\005\007\000\002\005\005\000\002\005\007\000\002" +
    "\005\005\000\002\005\007\000\002\005\005\000\002\005" +
    "\007\000\002\005\007\000\002\010\002\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\006\013\000\002\006\012\000\002\006" +
    "\013\000\002\006\013\000\002\006\012\000\002\006\013" +
    "\000\002\006\013\000\002\006\012\000\002\006\013\000" +
    "\002\011\011\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\012" +
    "\015\000\002\014\011\000\002\015\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\010\011\006\012\004\013\005\001\002\000" +
    "\004\013\u0100\001\002\000\004\045\374\001\002\000\004" +
    "\013\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\045\012\001\002\000\004\040\013" +
    "\001\002\000\026\005\022\006\017\007\025\011\020\012" +
    "\026\020\014\021\021\022\015\023\027\024\023\001\002" +
    "\000\004\045\367\001\002\000\004\045\362\001\002\000" +
    "\030\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\041\uffe0\001\002\000" +
    "\004\045\353\001\002\000\010\005\324\007\323\024\325" +
    "\001\002\000\004\045\316\001\002\000\004\045\307\001" +
    "\002\000\004\045\300\001\002\000\030\005\uffde\006\uffde" +
    "\007\uffde\011\uffde\012\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\041\uffde\001\002\000\004\045\271\001\002" +
    "\000\010\005\042\007\041\024\043\001\002\000\004\045" +
    "\034\001\002\000\030\005\022\006\017\007\025\011\020" +
    "\012\026\020\014\021\021\022\015\023\027\024\023\041" +
    "\032\001\002\000\030\005\uffe1\006\uffe1\007\uffe1\011\uffe1" +
    "\012\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\041" +
    "\uffe1\001\002\000\004\002\000\001\002\000\030\005\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\012\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\041\uffdf\001\002\000\006\031\036" +
    "\044\035\001\002\000\040\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\026\uffce\030\uffce\041\uffce\045\uffce\001\002\000" +
    "\004\046\037\001\002\000\004\044\040\001\002\000\040" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\030\uffcd" +
    "\041\uffcd\045\uffcd\001\002\000\004\045\262\001\002\000" +
    "\004\045\253\001\002\000\004\045\044\001\002\000\004" +
    "\036\045\001\002\000\024\005\051\006\050\007\054\020" +
    "\046\021\052\022\047\023\055\024\053\037\uffc9\001\002" +
    "\000\004\045\252\001\002\000\004\045\251\001\002\000" +
    "\004\045\250\001\002\000\004\045\247\001\002\000\004" +
    "\045\246\001\002\000\004\045\245\001\002\000\004\045" +
    "\244\001\002\000\004\045\243\001\002\000\004\037\057" +
    "\001\002\000\004\040\060\001\002\000\032\005\065\006" +
    "\017\007\076\010\074\020\014\021\021\022\015\023\027" +
    "\024\073\026\072\030\075\045\064\001\002\000\034\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\030\ufff6\041\ufff6\045\ufff6\001" +
    "\002\000\034\005\065\006\017\007\076\010\074\020\014" +
    "\021\021\022\015\023\027\024\073\026\072\030\075\041" +
    "\242\045\064\001\002\000\034\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026" +
    "\ufffc\030\ufffc\041\ufffc\045\ufffc\001\002\000\004\031\171" +
    "\001\002\000\004\045\162\001\002\000\034\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\026\ufffa\030\ufffa\041\ufffa\045\ufffa\001\002\000" +
    "\034\005\ufff8\006\ufff8\007\ufff8\010\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\026\ufff8\030\ufff8\041\ufff8\045" +
    "\ufff8\001\002\000\034\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\030" +
    "\ufff2\041\ufff2\045\ufff2\001\002\000\034\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\026\ufff4\030\ufff4\041\ufff4\045\ufff4\001\002\000\004" +
    "\036\150\001\002\000\004\045\141\001\002\000\004\040" +
    "\131\001\002\000\004\036\106\001\002\000\004\045\077" +
    "\001\002\000\006\031\101\044\100\001\002\000\040\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\030\uffd7\041" +
    "\uffd7\045\uffd7\001\002\000\006\025\102\045\103\001\002" +
    "\000\004\044\105\001\002\000\004\044\104\001\002\000" +
    "\040\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\026\uffd5\030" +
    "\uffd5\041\uffd5\045\uffd5\001\002\000\040\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\030\uffd6\041\uffd6\045\uffd6" +
    "\001\002\000\006\015\110\045\111\001\002\000\004\037" +
    "\117\001\002\000\004\037\uffb6\001\002\000\004\016\112" +
    "\001\002\000\012\015\115\025\114\045\116\046\113\001" +
    "\002\000\004\037\uffb4\001\002\000\004\037\uffb2\001\002" +
    "\000\004\037\uffb5\001\002\000\004\037\uffb3\001\002\000" +
    "\004\040\120\001\002\000\032\005\065\006\017\007\076" +
    "\010\074\020\014\021\021\022\015\023\027\024\073\026" +
    "\072\030\075\045\064\001\002\000\034\005\065\006\017" +
    "\007\076\010\074\020\014\021\021\022\015\023\027\024" +
    "\073\026\072\030\075\041\125\045\064\001\002\000\034" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\026\ufff7\030\ufff7\041\ufff7\045\ufff7" +
    "\001\002\000\034\005\ufffd\006\ufffd\007\ufffd\010\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd\030\ufffd" +
    "\041\ufffd\045\ufffd\001\002\000\034\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\026\ufffb\030\ufffb\041\ufffb\045\ufffb\001\002\000\034\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\026\uffb0\030\uffb0\041\uffb0\045\uffb0\001" +
    "\002\000\034\005\ufff9\006\ufff9\007\ufff9\010\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\030\ufff9\041" +
    "\ufff9\045\ufff9\001\002\000\034\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\026" +
    "\ufff3\030\ufff3\041\ufff3\045\ufff3\001\002\000\034\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\026\ufff5\030\ufff5\041\ufff5\045\ufff5\001\002" +
    "\000\032\005\065\006\017\007\076\010\074\020\014\021" +
    "\021\022\015\023\027\024\073\026\072\030\075\045\064" +
    "\001\002\000\034\005\065\006\017\007\076\010\074\020" +
    "\014\021\021\022\015\023\027\024\073\026\072\030\075" +
    "\041\133\045\064\001\002\000\004\030\134\001\002\000" +
    "\004\036\135\001\002\000\006\015\110\045\111\001\002" +
    "\000\004\037\137\001\002\000\004\044\140\001\002\000" +
    "\034\005\uffaf\006\uffaf\007\uffaf\010\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\026\uffaf\030\uffaf\041\uffaf\045" +
    "\uffaf\001\002\000\006\031\143\044\142\001\002\000\040" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\030\uffcc" +
    "\041\uffcc\045\uffcc\001\002\000\006\015\144\045\145\001" +
    "\002\000\004\044\147\001\002\000\004\044\146\001\002" +
    "\000\040\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca" +
    "\030\uffca\041\uffca\045\uffca\001\002\000\040\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\026\uffcb\030\uffcb\041\uffcb\045" +
    "\uffcb\001\002\000\006\015\110\045\111\001\002\000\004" +
    "\037\152\001\002\000\004\040\153\001\002\000\032\005" +
    "\065\006\017\007\076\010\074\020\014\021\021\022\015" +
    "\023\027\024\073\026\072\030\075\045\064\001\002\000" +
    "\034\005\065\006\017\007\076\010\074\020\014\021\021" +
    "\022\015\023\027\024\073\026\072\030\075\041\155\045" +
    "\064\001\002\000\036\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027" +
    "\156\030\uffb7\041\uffb7\045\uffb7\001\002\000\004\040\157" +
    "\001\002\000\032\005\065\006\017\007\076\010\074\020" +
    "\014\021\021\022\015\023\027\024\073\026\072\030\075" +
    "\045\064\001\002\000\034\005\065\006\017\007\076\010" +
    "\074\020\014\021\021\022\015\023\027\024\073\026\072" +
    "\030\075\041\161\045\064\001\002\000\034\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\026\uffb1\030\uffb1\041\uffb1\045\uffb1\001\002\000" +
    "\006\031\164\044\163\001\002\000\040\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\026\uffdd\030\uffdd\041\uffdd\045\uffdd" +
    "\001\002\000\006\045\166\046\165\001\002\000\004\044" +
    "\170\001\002\000\004\044\167\001\002\000\040\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\030\uffdb\041\uffdb" +
    "\045\uffdb\001\002\000\040\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\030\uffdc\041\uffdc\045\uffdc\001\002\000" +
    "\012\015\174\025\173\045\175\046\172\001\002\000\014" +
    "\032\230\033\227\034\231\035\226\044\225\001\002\000" +
    "\004\044\224\001\002\000\004\044\223\001\002\000\014" +
    "\032\201\033\200\034\202\035\176\044\177\001\002\000" +
    "\006\045\220\046\217\001\002\000\034\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\026\ufff1\030\ufff1\041\ufff1\045\ufff1\001\002\000\006" +
    "\045\214\046\213\001\002\000\006\045\210\046\207\001" +
    "\002\000\006\045\204\046\203\001\002\000\004\044\206" +
    "\001\002\000\004\044\205\001\002\000\034\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\026\uffeb\030\uffeb\041\uffeb\045\uffeb\001\002\000" +
    "\034\005\uffe5\006\uffe5\007\uffe5\010\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\026\uffe5\030\uffe5\041\uffe5\045" +
    "\uffe5\001\002\000\004\044\212\001\002\000\004\044\211" +
    "\001\002\000\034\005\uffed\006\uffed\007\uffed\010\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\026\uffed\030\uffed" +
    "\041\uffed\045\uffed\001\002\000\034\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\026\uffe9\030\uffe9\041\uffe9\045\uffe9\001\002\000\004\044" +
    "\216\001\002\000\004\044\215\001\002\000\034\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\026\uffec\030\uffec\041\uffec\045\uffec\001\002" +
    "\000\034\005\uffe7\006\uffe7\007\uffe7\010\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\030\uffe7\041\uffe7" +
    "\045\uffe7\001\002\000\004\044\222\001\002\000\004\044" +
    "\221\001\002\000\034\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\030" +
    "\uffea\041\uffea\045\uffea\001\002\000\034\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\026\uffe3\030\uffe3\041\uffe3\045\uffe3\001\002\000\034" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\026\uffef\030\uffef\041\uffef\045\uffef" +
    "\001\002\000\034\005\uffee\006\uffee\007\uffee\010\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\026\uffee\030\uffee" +
    "\041\uffee\045\uffee\001\002\000\034\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\026\ufff0\030\ufff0\041\ufff0\045\ufff0\001\002\000\004\045" +
    "\240\001\002\000\004\045\236\001\002\000\004\045\234" +
    "\001\002\000\004\045\232\001\002\000\004\044\233\001" +
    "\002\000\034\005\uffe4\006\uffe4\007\uffe4\010\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4\030\uffe4\041" +
    "\uffe4\045\uffe4\001\002\000\004\044\235\001\002\000\034" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\026\uffe8\030\uffe8\041\uffe8\045\uffe8" +
    "\001\002\000\004\044\237\001\002\000\034\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\026\uffe6\030\uffe6\041\uffe6\045\uffe6\001\002\000" +
    "\004\044\241\001\002\000\034\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\026" +
    "\uffe2\030\uffe2\041\uffe2\045\uffe2\001\002\000\030\005\uffb8" +
    "\006\uffb8\007\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\041\uffb8\001\002\000\004\037\uffc2" +
    "\001\002\000\004\037\uffc6\001\002\000\004\037\uffc1\001" +
    "\002\000\004\037\uffc4\001\002\000\004\037\uffc8\001\002" +
    "\000\004\037\uffc7\001\002\000\004\037\uffc3\001\002\000" +
    "\004\037\uffc5\001\002\000\004\036\254\001\002\000\024" +
    "\005\051\006\050\007\054\020\046\021\052\022\047\023" +
    "\055\024\053\037\uffc9\001\002\000\004\037\256\001\002" +
    "\000\004\040\257\001\002\000\032\005\065\006\017\007" +
    "\076\010\074\020\014\021\021\022\015\023\027\024\073" +
    "\026\072\030\075\045\064\001\002\000\034\005\065\006" +
    "\017\007\076\010\074\020\014\021\021\022\015\023\027" +
    "\024\073\026\072\030\075\041\261\045\064\001\002\000" +
    "\030\005\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\041\uffbe\001\002\000" +
    "\004\036\263\001\002\000\024\005\051\006\050\007\054" +
    "\020\046\021\052\022\047\023\055\024\053\037\uffc9\001" +
    "\002\000\004\037\265\001\002\000\004\040\266\001\002" +
    "\000\032\005\065\006\017\007\076\010\074\020\014\021" +
    "\021\022\015\023\027\024\073\026\072\030\075\045\064" +
    "\001\002\000\034\005\065\006\017\007\076\010\074\020" +
    "\014\021\021\022\015\023\027\024\073\026\072\030\075" +
    "\041\270\045\064\001\002\000\030\005\uffbb\006\uffbb\007" +
    "\uffbb\011\uffbb\012\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\041\uffbb\001\002\000\010\031\101\036\272\044" +
    "\100\001\002\000\024\005\051\006\050\007\054\020\046" +
    "\021\052\022\047\023\055\024\053\037\uffc9\001\002\000" +
    "\004\037\274\001\002\000\004\040\275\001\002\000\032" +
    "\005\065\006\017\007\076\010\074\020\014\021\021\022" +
    "\015\023\027\024\073\026\072\030\075\045\064\001\002" +
    "\000\034\005\065\006\017\007\076\010\074\020\014\021" +
    "\021\022\015\023\027\024\073\026\072\030\075\041\277" +
    "\045\064\001\002\000\030\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\041\uffbc\001\002\000\010\031\143\036\301\044\142\001" +
    "\002\000\024\005\051\006\050\007\054\020\046\021\052" +
    "\022\047\023\055\024\053\037\uffc9\001\002\000\004\037" +
    "\303\001\002\000\004\040\304\001\002\000\032\005\065" +
    "\006\017\007\076\010\074\020\014\021\021\022\015\023" +
    "\027\024\073\026\072\030\075\045\064\001\002\000\034" +
    "\005\065\006\017\007\076\010\074\020\014\021\021\022" +
    "\015\023\027\024\073\026\072\030\075\041\306\045\064" +
    "\001\002\000\030\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\041\uffb9" +
    "\001\002\000\010\031\164\036\310\044\163\001\002\000" +
    "\024\005\051\006\050\007\054\020\046\021\052\022\047" +
    "\023\055\024\053\037\uffc9\001\002\000\004\037\312\001" +
    "\002\000\004\040\313\001\002\000\032\005\065\006\017" +
    "\007\076\010\074\020\014\021\021\022\015\023\027\024" +
    "\073\026\072\030\075\045\064\001\002\000\034\005\065" +
    "\006\017\007\076\010\074\020\014\021\021\022\015\023" +
    "\027\024\073\026\072\030\075\041\315\045\064\001\002" +
    "\000\030\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\041\uffbf\001\002" +
    "\000\006\031\320\044\317\001\002\000\040\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\026\uffd2\030\uffd2\041\uffd2\045" +
    "\uffd2\001\002\000\004\046\321\001\002\000\004\044\322" +
    "\001\002\000\040\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\026\uffd1\030\uffd1\041\uffd1\045\uffd1\001\002\000\004\045" +
    "\344\001\002\000\004\045\335\001\002\000\004\045\326" +
    "\001\002\000\004\036\327\001\002\000\024\005\051\006" +
    "\050\007\054\020\046\021\052\022\047\023\055\024\053" +
    "\037\uffc9\001\002\000\004\037\331\001\002\000\004\040" +
    "\332\001\002\000\032\005\065\006\017\007\076\010\074" +
    "\020\014\021\021\022\015\023\027\024\073\026\072\030" +
    "\075\045\064\001\002\000\034\005\065\006\017\007\076" +
    "\010\074\020\014\021\021\022\015\023\027\024\073\026" +
    "\072\030\075\041\334\045\064\001\002\000\030\005\uffba" +
    "\006\uffba\007\uffba\011\uffba\012\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\041\uffba\001\002\000\004\036\336" +
    "\001\002\000\024\005\051\006\050\007\054\020\046\021" +
    "\052\022\047\023\055\024\053\037\uffc9\001\002\000\004" +
    "\037\340\001\002\000\004\040\341\001\002\000\032\005" +
    "\065\006\017\007\076\010\074\020\014\021\021\022\015" +
    "\023\027\024\073\026\072\030\075\045\064\001\002\000" +
    "\034\005\065\006\017\007\076\010\074\020\014\021\021" +
    "\022\015\023\027\024\073\026\072\030\075\041\343\045" +
    "\064\001\002\000\030\005\uffc0\006\uffc0\007\uffc0\011\uffc0" +
    "\012\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\041" +
    "\uffc0\001\002\000\004\036\345\001\002\000\024\005\051" +
    "\006\050\007\054\020\046\021\052\022\047\023\055\024" +
    "\053\037\uffc9\001\002\000\004\037\347\001\002\000\004" +
    "\040\350\001\002\000\032\005\065\006\017\007\076\010" +
    "\074\020\014\021\021\022\015\023\027\024\073\026\072" +
    "\030\075\045\064\001\002\000\034\005\065\006\017\007" +
    "\076\010\074\020\014\021\021\022\015\023\027\024\073" +
    "\026\072\030\075\041\352\045\064\001\002\000\030\005" +
    "\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\041\uffbd\001\002\000\006\031" +
    "\355\044\354\001\002\000\040\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\026\uffda\030\uffda\041\uffda\045\uffda\001\002" +
    "\000\006\014\356\045\357\001\002\000\004\044\361\001" +
    "\002\000\004\044\360\001\002\000\040\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\026\uffd8\030\uffd8\041\uffd8\045\uffd8" +
    "\001\002\000\040\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\026\uffd9\030\uffd9\041\uffd9\045\uffd9\001\002\000\006\031" +
    "\364\044\363\001\002\000\040\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\026\uffd0\030\uffd0\041\uffd0\045\uffd0\001\002" +
    "\000\004\046\365\001\002\000\004\044\366\001\002\000" +
    "\040\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\030" +
    "\uffcf\041\uffcf\045\uffcf\001\002\000\006\031\371\044\370" +
    "\001\002\000\040\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\026\uffd4\030\uffd4\041\uffd4\045\uffd4\001\002\000\004\046" +
    "\372\001\002\000\004\044\373\001\002\000\040\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\026\uffd3\030\uffd3\041\uffd3" +
    "\045\uffd3\001\002\000\004\040\375\001\002\000\026\005" +
    "\022\006\017\007\025\011\020\012\026\020\014\021\021" +
    "\022\015\023\027\024\023\001\002\000\030\005\022\006" +
    "\017\007\025\011\020\012\026\020\014\021\021\022\015" +
    "\023\027\024\023\041\377\001\002\000\004\002\uffff\001" +
    "\002\000\004\045\u0101\001\002\000\004\040\u0102\001\002" +
    "\000\026\005\022\006\017\007\025\011\020\012\026\020" +
    "\014\021\021\022\015\023\027\024\023\001\002\000\030" +
    "\005\022\006\017\007\025\011\020\012\026\020\014\021" +
    "\021\022\015\023\027\024\023\041\u0104\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\015\006\023\007\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\030\006\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\061\004\067\005\062\011\065\012\066" +
    "\014\060\015\070\001\001\000\002\001\001\000\016\004" +
    "\126\005\122\011\123\012\125\014\121\015\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\120\004\067\005\062\011\065\012\066" +
    "\014\060\015\070\001\001\000\016\004\126\005\122\011" +
    "\123\012\125\014\121\015\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\131\004\067\005\062\011\065\012\066\014\060\015" +
    "\070\001\001\000\016\004\126\005\122\011\123\012\125" +
    "\014\121\015\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\153" +
    "\004\067\005\062\011\065\012\066\014\060\015\070\001" +
    "\001\000\016\004\126\005\122\011\123\012\125\014\121" +
    "\015\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\157\004\067\005\062\011\065\012\066\014\060" +
    "\015\070\001\001\000\016\004\126\005\122\011\123\012" +
    "\125\014\121\015\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\257\004\067\005\062\011\065\012\066\014\060\015\070" +
    "\001\001\000\016\004\126\005\122\011\123\012\125\014" +
    "\121\015\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\266\004\067\005\062\011\065\012\066" +
    "\014\060\015\070\001\001\000\016\004\126\005\122\011" +
    "\123\012\125\014\121\015\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\275\004\067\005\062" +
    "\011\065\012\066\014\060\015\070\001\001\000\016\004" +
    "\126\005\122\011\123\012\125\014\121\015\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\304" +
    "\004\067\005\062\011\065\012\066\014\060\015\070\001" +
    "\001\000\016\004\126\005\122\011\123\012\125\014\121" +
    "\015\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\313\004\067\005\062\011\065\012\066\014" +
    "\060\015\070\001\001\000\016\004\126\005\122\011\123" +
    "\012\125\014\121\015\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\332\004\067\005\062\011\065\012\066\014\060\015\070" +
    "\001\001\000\016\004\126\005\122\011\123\012\125\014" +
    "\121\015\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\341\004\067\005\062\011\065\012\066" +
    "\014\060\015\070\001\001\000\016\004\126\005\122\011" +
    "\123\012\125\014\121\015\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\350\004\067\005\062" +
    "\011\065\012\066\014\060\015\070\001\001\000\016\004" +
    "\126\005\122\011\123\012\125\014\121\015\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\015\006\023\007\375\001\001\000\006\005\030\006" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\015\006\023\007\u0102\001\001\000" +
    "\006\005\030\006\032\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_METODO ::= Private Bool Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_METODO ::= Bool Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_METODO ::= Public Bool Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_METODO ::= Private String Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_METODO ::= String Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_METODO ::= Public String Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_METODO ::= Private Int Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_METODO ::= Int Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_METODO ::= Public Int Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROS ::= Bool Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROS ::= Double Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROS ::= Float Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS ::= Long Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS ::= Short Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS ::= String Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS ::= Char Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Bool Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Bool Identificador Igual Op_booleano PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Bool Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Double Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Double Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Float Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Float Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Long Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Long Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Short Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Short Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= String Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= String Identificador Igual Literal PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= String Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Char Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Char Identificador Igual Caracter PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Char Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Int Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Int Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Int Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUE ::= DECLARACION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE ::= BLOQUE DECLARACION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE ::= BLOQUE DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRECION ::= Identificador Igual Numero Division Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRECION ::= Identificador Igual Identificador Division Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRECION ::= Identificador Igual Numero Multiplicacion Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRECION ::= Identificador Igual Identificador Multiplicacion Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRECION ::= Identificador Igual Numero Resta Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRECION ::= Identificador Igual Identificador Resta Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRECION ::= Identificador Igual Numero Suma Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRECION ::= Identificador Igual Identificador Suma Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRECION ::= Identificador Igual Identificador Division Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRECION ::= Identificador Igual Identificador Multiplicacion Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRECION ::= Identificador Igual Identificador Resta Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRECION ::= Identificador Igual Identificador Suma Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRECION ::= Identificador Igual Literal PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRECION ::= Identificador Igual Op_booleano PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRECION ::= Identificador Igual Numero PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRECION ::= Identificador Igual Identificador PuntoyComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= EXPRECION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA EXPRECION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Private Class Identificador Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Class Identificador Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Public Class Identificador Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

